// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: follow/v1/follow.proto

package followv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowService_AddFollowRelation_FullMethodName    = "/follow.v1.FollowService/AddFollowRelation"
	FollowService_DeleteFollowRelation_FullMethodName = "/follow.v1.FollowService/DeleteFollowRelation"
	FollowService_FollowRelationList_FullMethodName   = "/follow.v1.FollowService/GetFollowee"
	FollowService_FollowRelationInfo_FullMethodName   = "/follow.v1.FollowService/FollowInfo"
)

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServiceClient interface {
	// 增删
	AddFollowRelation(ctx context.Context, in *AddFollowRelationRequest, opts ...grpc.CallOption) (*AddFollowRelationResponse, error)
	DeleteFollowRelation(ctx context.Context, in *DeleteFollowRelationRequest, opts ...grpc.CallOption) (*DeleteFollowRelationResponse, error)
	// 查询
	FollowRelationList(ctx context.Context, in *FollowRelationListRequest, opts ...grpc.CallOption) (*FollowRelationListResponse, error)
	FollowRelationInfo(ctx context.Context, in *FollowRelationInfoRequest, opts ...grpc.CallOption) (*FollowRelationInfoResponse, error)
}

type followServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServiceClient(cc grpc.ClientConnInterface) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) AddFollowRelation(ctx context.Context, in *AddFollowRelationRequest, opts ...grpc.CallOption) (*AddFollowRelationResponse, error) {
	out := new(AddFollowRelationResponse)
	err := c.cc.Invoke(ctx, FollowService_AddFollowRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) DeleteFollowRelation(ctx context.Context, in *DeleteFollowRelationRequest, opts ...grpc.CallOption) (*DeleteFollowRelationResponse, error) {
	out := new(DeleteFollowRelationResponse)
	err := c.cc.Invoke(ctx, FollowService_DeleteFollowRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) FollowRelationList(ctx context.Context, in *FollowRelationListRequest, opts ...grpc.CallOption) (*FollowRelationListResponse, error) {
	out := new(FollowRelationListResponse)
	err := c.cc.Invoke(ctx, FollowService_FollowRelationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) FollowRelationInfo(ctx context.Context, in *FollowRelationInfoRequest, opts ...grpc.CallOption) (*FollowRelationInfoResponse, error) {
	out := new(FollowRelationInfoResponse)
	err := c.cc.Invoke(ctx, FollowService_FollowRelationInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServiceServer is the server API for FollowService service.
// All implementations must embed UnimplementedFollowServiceServer
// for forward compatibility
type FollowServiceServer interface {
	// 增删
	AddFollowRelation(context.Context, *AddFollowRelationRequest) (*AddFollowRelationResponse, error)
	DeleteFollowRelation(context.Context, *DeleteFollowRelationRequest) (*DeleteFollowRelationResponse, error)
	// 查询
	FollowRelationList(context.Context, *FollowRelationListRequest) (*FollowRelationListResponse, error)
	FollowRelationInfo(context.Context, *FollowRelationInfoRequest) (*FollowRelationInfoResponse, error)
	mustEmbedUnimplementedFollowServiceServer()
}

// UnimplementedFollowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServiceServer struct {
}

func (UnimplementedFollowServiceServer) AddFollowRelation(context.Context, *AddFollowRelationRequest) (*AddFollowRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollowRelation not implemented")
}
func (UnimplementedFollowServiceServer) DeleteFollowRelation(context.Context, *DeleteFollowRelationRequest) (*DeleteFollowRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollowRelation not implemented")
}
func (UnimplementedFollowServiceServer) FollowRelationList(context.Context, *FollowRelationListRequest) (*FollowRelationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowee not implemented")
}
func (UnimplementedFollowServiceServer) FollowRelationInfo(context.Context, *FollowRelationInfoRequest) (*FollowRelationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowInfo not implemented")
}
func (UnimplementedFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {}

// UnsafeFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServiceServer will
// result in compilation errors.
type UnsafeFollowServiceServer interface {
	mustEmbedUnimplementedFollowServiceServer()
}

func RegisterFollowServiceServer(s grpc.ServiceRegistrar, srv FollowServiceServer) {
	s.RegisterService(&FollowService_ServiceDesc, srv)
}

func _FollowService_AddFollowRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).AddFollowRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_AddFollowRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).AddFollowRelation(ctx, req.(*AddFollowRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_DeleteFollowRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).DeleteFollowRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_DeleteFollowRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).DeleteFollowRelation(ctx, req.(*DeleteFollowRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_FollowRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRelationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).FollowRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_FollowRelationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).FollowRelationList(ctx, req.(*FollowRelationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_FollowRelationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRelationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).FollowRelationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_FollowRelationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).FollowRelationInfo(ctx, req.(*FollowRelationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowService_ServiceDesc is the grpc.ServiceDesc for FollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "follow.v1.FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFollowRelation",
			Handler:    _FollowService_AddFollowRelation_Handler,
		},
		{
			MethodName: "DeleteFollowRelation",
			Handler:    _FollowService_DeleteFollowRelation_Handler,
		},
		{
			MethodName: "GetFollowee",
			Handler:    _FollowService_FollowRelationList_Handler,
		},
		{
			MethodName: "FollowInfo",
			Handler:    _FollowService_FollowRelationInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follow/v1/follow.proto",
}
