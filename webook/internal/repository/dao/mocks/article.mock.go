// Code generated by MockGen. DO NOT EDIT.
// Source: ./webook/internal/repository/dao/article.go

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "gitee.com/geekbang/basic-go/webook/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleDAO is a mock of ArticleDAO interface.
type MockArticleDAO struct {
	ctrl     *gomock.Controller
	recorder *MockArticleDAOMockRecorder
}

// MockArticleDAOMockRecorder is the mock recorder for MockArticleDAO.
type MockArticleDAOMockRecorder struct {
	mock *MockArticleDAO
}

// NewMockArticleDAO creates a new mock instance.
func NewMockArticleDAO(ctrl *gomock.Controller) *MockArticleDAO {
	mock := &MockArticleDAO{ctrl: ctrl}
	mock.recorder = &MockArticleDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleDAO) EXPECT() *MockArticleDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleDAO) Create(ctx context.Context, art dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleDAOMockRecorder) Create(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleDAO)(nil).Create), ctx, art)
}

// Sync mocks base method.
func (m *MockArticleDAO) Sync(ctx context.Context, art dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockArticleDAOMockRecorder) Sync(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockArticleDAO)(nil).Sync), ctx, art)
}

// SyncStatus mocks base method.
func (m *MockArticleDAO) SyncStatus(ctx context.Context, id int64, status uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatus indicates an expected call of SyncStatus.
func (mr *MockArticleDAOMockRecorder) SyncStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockArticleDAO)(nil).SyncStatus), ctx, id, status)
}

// UpdateById mocks base method.
func (m *MockArticleDAO) UpdateById(ctx context.Context, art dao.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockArticleDAOMockRecorder) UpdateById(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockArticleDAO)(nil).UpdateById), ctx, art)
}
